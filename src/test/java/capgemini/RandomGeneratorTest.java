package capgemini;

import org.junit.Before;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

public class RandomGeneratorTest {

    private RandomGenerator randomGenerator;
    private Map<Integer, Integer> numberCounts;

    @BeforeEach
    public void setup() {
        randomGenerator = new RandomGenerator();
        numberCounts = new HashMap<Integer, Integer>();
    }

    @RepeatedTest(value = 100)
    @DisplayName("Test that generates samples * max - the upper border of random numbers - numbers and checks if the numbers are random")
    public  void  checkIfNumbersAreRandom() {
        int samples = 10000;  //how many samples we wont for each number (+ / - deviation)
        int max = 10;   // max int for rangdom generator
        double deviation = 0.04; //deviation - minimal estimated range in which we can assume that number repeats randomly


        for (int i = 0; i < max * samples; i++) {  //making max (here 10) times samples (here 1000) iteration to generate max time samples numbers.

            int number = randomGenerator.generate(max);  //getting number from the method of RandomGenerator
            if (numberCounts.isEmpty()) { //if Map od counts is empty, adding number with 1st count (variable number is key)
                numberCounts.put(number, 1);

            }
            else if (!numberCounts.containsKey(number)) { //if there is not such number (key) in Map - add one and give it 1 count
                numberCounts.put(number, 1);

            }
            else {
                numberCounts.put(number, (numberCounts.get(number) + 1)); //if there is a number (key) in Map increment it value
            }
        }

        int lowerBand = (int) Math.floor((double) samples * (1.0 - deviation)); //establishing deviation range - bottom and upper
        int upperBand = (int) Math.floor((double) samples * (1.0 + deviation));

        for (int key: numberCounts.keySet()) { //testing if counts of numbers generated by random generator are in estimated bands for randomness

            assertTrue(numberCounts.get(key) >= lowerBand,  "Counts of" + numberCounts.get(key) + "number: " + key + "are not >= than lower band: " + lowerBand);
            assertTrue(numberCounts.get(key) <= upperBand,  "Counts of" + numberCounts.get(key) + "number: " + key + "are not <= than upper bank: " + upperBand);

        }
    }


}
